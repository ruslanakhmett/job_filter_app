name: My CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        database-name:
          - django_db_test
        database-password:
          - pass_test
        database-user:
          - django_user_test
        database-host:
          - 127.0.0.1
        database-port:
          - 5432

    services:
      postgres:
        image: postgres:12.0-alpine
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2.4.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.3.1
      with:
        python-version: ${{ matrix.python-version }}

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r req.txt
    
    # - name: Format with black
    #   run: |
    #     pip install black
    #     # format the files with black
    #     black .
    
    # - name: Lint with flake8
    #   run: |
    #     pip install flake8
    #     flake8 . --ignore E501,W503

    # - name: Sort imports
    #   run: |
    #     pip install isort
    #     # stop the build if there are Python syntax errors or undefined names
    #     isort .
    #     isort --check --diff .
    
    - name: Setup test database
      env:
        POSTGRES_DB_NAME: ${{ matrix.database-name }}
        POSTGRES_USER: ${{ matrix.database-user }}
        POSTGRES_PASSWORD: ${{ matrix.database-password }}
        POSTGRES_DB_HOST: ${{ matrix.database-host }}
        POSTGRES_DB_PORT: ${{ matrix.database-port }}
        POSTGRES_DB: ${{ matrix.database-name }}
      run: |
        export DATABASE_URL=postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}
        export SECRET_KEY=test_key
        export DEBUG=1
    
    - name: Run migrations
      run: |
        export DATABASE_URL=postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}
        export SECRET_KEY=test_key
        export DEBUG=1
        export ALLOWED_HOSTS=127.0.0.1
        export GITHUB_WORKFLOW=True
        export MODE=workflow
        python manage.py flush --no-input
        python manage.py makemigrations
        python manage.py migrate
        python manage.py migrate --run-syncdb
        python manage.py check

    - uses: actions/checkout@v2.4.0
    - name: Build the images and start the containers
      run: |
        docker-compose -f docker-compose_ci.yml build
        docker-compose -f docker-compose_ci.yml up -d
        # run: docker-compose up -d --build
    
    - name: Stop containers
      if: always()
      run: docker-compose -f "docker-compose_ci.yml" down

    # - name: Create env file
    #   run: |
    #     touch .env
    #     echo "${{ secrets.SERVER_ENV_PROD }}" > .env
    #     cat .env

    # - name: Start Deployment
    #   uses: TapTap21/docker-remote-deployment-action@v1.0
    #   with:
    #     remote_docker_host: root@80.87.198.203
    #     ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
    #     ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
    #     stack_file_name: docker-compose.yml
    #     docker_login_password: ${{ secrets.DOCKER_PWD }}
    #     docker_login_user: ${{ secrets.DOCKER_LOGIN }}
    #     args: -p job_filter_app up --build -d